CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT,
  order_date DATE,
  order_status VARCHAR(20)
);

INSERT INTO orders (order_id, customer_id, order_date, order_status)
VALUES 
    (1,1,'2022-05-01','Delivered'),
    (2,5,'2022-05-05', 'Delivered'),
    (3,2,'2022-12-11', 'Delivered'),
    (4,3,'2022-12-25', 'Delivered'),
    (5,4,'2022-11-10','Pending');

CREATE TABLE order_details (
  order_id INT,
  product_id INT,
  quantity INT,
  unit_price DECIMAL(10,2),
  PRIMARY KEY (order_id, product_id)
);

INSERT INTO order_details (order_id, product_id, quantity, unit_price)
VALUES 
    (1,2,3,100),
    (2,3,2,200),
    (3,1,1,250),
    (4,1,1,250),
    (5,4,1,150);

CREATE TABLE products (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(50),
  category_id INT,
  price DECIMAL(10,2)
);

INSERT INTO products (product_id, product_name, category_id, price)
VALUES 
    (1, 'Product 1',1,100),
    (2, 'Product 2',2,200),
    (3, 'Product 3',3,100),
    (4, 'Product 4',1,80),
    (5, 'Product 5',2,150);

CREATE TABLE categories (
  category_id INT PRIMARY KEY,
  category_name VARCHAR(50)
);

INSERT INTO categories (category_id, category_name)
VALUES 
    (1, 'Electronics'),
    (2, 'Clothing'),
    (3, 'Home & Kitchen');

CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  name VARCHAR(50),
  email VARCHAR(50),
  address VARCHAR(100)
);

INSERT INTO customers (customer_id, name, email, address)
VALUES 
    (1, 'John','john@example.com','123 Main Street'),
    (2, 'Maria','maria@example.com','456 Park Avenue'),
    (3, 'Emma','emma@example.com','789 Broad Street'),
    (4, 'James','james@example.com','135 Wall Street'),
    (5, 'Fang','fang@example.com', '221 Baker Street');

CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50)
);

INSERT INTO departments (department_id, department_name)
VALUES 
    (1, 'Sales'),
    (2, 'Marketing'),
    (3, 'Engineering'),
    (4, 'Finance'),
    (5, 'Operations'),
    (6, 'HR');
    
CREATE TABLE employees (
  emp_id INT PRIMARY KEY,
  name VARCHAR(50),
  manager_id INT,
  salary DECIMAL(10,2),
  department_id INT,
  FOREIGN KEY (department_id) REFERENCES departments(department_id)
);


INSERT INTO employees (emp_id, name, manager_id, salary, department_id)
VALUES 
    (1, 'John',2,50000,1),
    (2, 'Maria',1,25000,3),
    (3, 'Emma',2,45000,3),
    (4, 'James',3,55000,6),
    (5, 'Fang',1, 60000,1),
    (6, 'Chad',2, 20000,4),
    (7, 'Manish',3, 70000,6),
    (8, 'Gopal',1, 65000,5);

select * from orders;
select * from order_details;
select * from categories;
select * from products;
select * from customers;
select * from departments;
select * from employees;
# What is the total quantity of products sold in the month of May 2022?

	select o.order_date, d.order_id, d.quantity, d.unit_price
	from orders as o
	left join order_details as d
	on o.order_id = d.order_id
	WHERE order_date BETWEEN '2022-05-01' AND '2022-05-31';
    
# What is the total revenue generated by the category "Electronics" in the month of December 2022?

select o.order_date, p.category_id, p.product_id, d.quantity, d.unit_price
from products as p
join order_details as d
on p.product_id = d.product_id
join orders as o
on d.order_id = o.order_id
WHERE order_date BETWEEN '2022-12-01' AND '2022-12-31';

# Write a query to return the name and email of all customers who have placed an order in the month of May and have ordered a product with a price greater than $100. Which of the following options returns the correct result?

select  o.order_date, o.order_id, o.customer_id, c.name, c.email, d.unit_price
from orders as o
join customers as c
on o.customer_id = c.customer_id
join order_details as d
on d.order_id = o.order_id
where unit_price >=100.00 and order_date BETWEEN '2022-05-01' AND '2022-05-31';

# Write a query to return the name and address of all customers who have ordered a product from the category 'Electronics' and whose order status is 'Delivered'. Which of the following options returns the correct result?
select c.name, c.address, o.order_status, p.category_id
from orders as o
join customers as c
on c.customer_id = o.customer_id
join order_details as d
on o.order_id = d.order_id
join products as p
on p.product_id = d.product_id
where category_id = 1 and order_status = "Delivered";


# Write a query to return the name and email of all customers who have placed an order, and also include customers who haven't placed any orders yet. Which of the following options returns the correct result?

select o.order_id, c.customer_id, c.name, c.email
from orders as o
join customers as c
on c.customer_id = o.customer_id
join order_details as d
on o.order_id = d.order_id
join products as p
on p.product_id = d.product_id;

# Write a query to return the product name and price of all products, including products that have no orders placed yet. Which of the following options returns the correct result?

select p.product_name, p.price, o.order_id
from orders as o
join customers as c
on c.customer_id = o.customer_id
join order_details as d
on o.order_id = d.order_id
join products as p
on p.product_id = d.product_id;

# Write a query to return the name and email of all customers who have placed an order for a product with a price greater than $100. Include customers who have not placed any orders. How many entries of such details are there?

select c.name, c.email, p.product_id, o.order_id, p.price, d.quantity
from orders as o
join customers as c
on c.customer_id = o.customer_id
join order_details as d
on o.order_id = d.order_id
join products as p
on p.product_id = d.product_id;

# Write a query to return the name and address of all customers who have placed an order for a product in the category 'Electronics', including customers who have not placed any orders. How many such rows are there?
select c.name, c.address, p.category_id
from orders as o
join customers as c
on c.customer_id = o.customer_id
join order_details as d
on o.order_id = d.order_id
join products as p
on p.product_id = d.product_id;

# Write a query to return all department names along with the number of employees in each department, including departments with no employees. Which of the following options correctly identifies the departments with no employees?

select d.department_name,  
count(e.emp_id) as Employee_count
from departments as d
left join employees as e
on e.department_id = d.department_id
group by department_name;

# Write a query to return the names of all customers who have not placed an order.
select c.name, c.customer_id, o.order_id
from orders as o
join customers as c
on c.customer_id = o.customer_id
join order_details as d
on o.order_id = d.order_id
join products as p
on p.product_id = d.product_id
where o.customer_id not in (o.order_id);

# Write a query to return the customer name and order date for all orders, including those with no corresponding customer or product data. Which of the following options returns the correct result?

select o.order_date, c.name 
from orders as o
left join customers as c
on c.customer_id = o.customer_id
join order_details as d
on o.order_id = d.order_id
left join products as p
on p.product_id = d.product_id;

# Consider two tables, customers and orders, with a Full Outer Join on the customer_id column. how many customers didn't place any order?

select * from customers as c
left join orders as o
on o.customer_id = c.customer_id
union
select * from customers as c
right join orders as o
on o.customer_id = c.customer_id;

# Write a query to return the name of all employees and their corresponding skip-level manager's name. Which of the following options represents the correct number of self-joins required to achieve this?

SELECT  e.emp_id as emp_id, e.name as emp_name, m.manager_id as Manager, m.name as Manager_name
from employees as e 
inner join employees as m
on e.manager_id = m.emp_id;

# Write a query to return the name of all employees and their corresponding manager's name. Which of the following options represents the correct number of self-joins required to achieve this, assuming that the employee table contains a foreign key column 'manager_id' which references the employee_id of the same table

SELECT  e.name as emp_name, m.name as Manager_name
from employees as e 
inner join employees as m
on e.manager_id = m.emp_id;

# Write a query to cross join the "customers" and "products" tables. If the "customers" table contains 50 records and the "products" table contains 100 records, how many records will be returned in the result set?
select * from customers
cross join products;

# Write a query to cross join the "orders" and "order_details" tables. If the "orders" table contains 500 records and the "order_details" table contains 20 records, how many records will be returned in the result set?

select * from orders
cross join order_details;

# Write a query to perform a cross join between the "customers" and "orders" tables. How many records will be returned by this query where the "order_status" is "Delivered"?

select * from customers
cross join orders;

# Write a query to perform a cross join between the "products" and "categories" tables. How many records will be returned by this query where the "category_name" is "Electronics"?

select * from products
cross join categories
where category_name = "Electronics";
